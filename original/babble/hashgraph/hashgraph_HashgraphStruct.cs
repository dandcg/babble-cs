//---------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool. Changes to this
//     file may cause incorrect behavior and will be lost
//     if the code is regenerated.
//
//     Generated on 2018 December 06 17:41:59 UTC
// </auto-generated>
//---------------------------------------------------------
using System;
using System.CodeDom.Compiler;
using System.Runtime.CompilerServices;
using static go.builtin;
using hex = go.encoding.hex_package;
using errors = go.errors_package;
using fmt = go.fmt_package;
using math = go.math_package;
using sort = go.sort_package;
using strconv = go.strconv_package;
using logrus = go.github.com.sirupsen.logrus_package;
using common = go.github.com.mosaicnetworks.babble.src.common_package;
using peers = go.github.com.mosaicnetworks.babble.src.peers_package;

namespace go
{
    public static partial class hashgraph_package
    {
        [GeneratedCode("go2cs", "0.1.1.0")]
        public partial struct Hashgraph : EmptyInterface
        {
            // Constructors
            public Hashgraph(NilType _)
            {
                this.Participants = default;
                this.Store = default;
                this.UndeterminedEvents = default;
                this.PendingRounds = default;
                this.LastConsensusRound = default;
                this.FirstConsensusRound = default;
                this.AnchorBlock = default;
                this.LastCommitedRoundEvents = default;
                this.SigPool = default;
                this.ConsensusTransactions = default;
                this.PendingLoadedEvents = default;
                this.commitCh = default;
                this.topologicalIndex = default;
                this.superMajority = default;
                this.trustCount = default;
                this.ancestorCache = default;
                this.selfAncestorCache = default;
                this.stronglySeeCache = default;
                this.roundCache = default;
                this.timestampCache = default;
                this.logger = default;
            }

            public Hashgraph(ref Ptr<peers.Peers> Participants, Store Store, slice<@string> UndeterminedEvents, slice<ref pendingRound> PendingRounds, ref Ptr<@int> LastConsensusRound, ref Ptr<@int> FirstConsensusRound, ref Ptr<@int> AnchorBlock, @int LastCommitedRoundEvents, slice<BlockSignature> SigPool, @int ConsensusTransactions, @int PendingLoadedEvents, channel<Block> commitCh, @int topologicalIndex, @int superMajority, @int trustCount, ref Ptr<common.LRU> ancestorCache, ref Ptr<common.LRU> selfAncestorCache, ref Ptr<common.LRU> stronglySeeCache, ref Ptr<common.LRU> roundCache, ref Ptr<common.LRU> timestampCache, ref Ptr<logrus.Entry> logger)
            {
                this.Participants = Participants;
                this.Store = Store;
                this.UndeterminedEvents = UndeterminedEvents;
                this.PendingRounds = PendingRounds;
                this.LastConsensusRound = LastConsensusRound;
                this.FirstConsensusRound = FirstConsensusRound;
                this.AnchorBlock = AnchorBlock;
                this.LastCommitedRoundEvents = LastCommitedRoundEvents;
                this.SigPool = SigPool;
                this.ConsensusTransactions = ConsensusTransactions;
                this.PendingLoadedEvents = PendingLoadedEvents;
                this.commitCh = commitCh;
                this.topologicalIndex = topologicalIndex;
                this.superMajority = superMajority;
                this.trustCount = trustCount;
                this.ancestorCache = ancestorCache;
                this.selfAncestorCache = selfAncestorCache;
                this.stronglySeeCache = stronglySeeCache;
                this.roundCache = roundCache;
                this.timestampCache = timestampCache;
                this.logger = logger;
            }

            // Enable comparisons between nil and Hashgraph struct
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator ==(Hashgraph value, NilType nil) => value.Equals(default(Hashgraph));

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator !=(Hashgraph value, NilType nil) => !(value == nil);

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator ==(NilType nil, Hashgraph value) => value == nil;

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator !=(NilType nil, Hashgraph value) => value != nil;

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static implicit operator Hashgraph(NilType nil) => default(Hashgraph);
        }

        [GeneratedCode("go2cs", "0.1.1.0")]
        public static Hashgraph Hashgraph_cast(dynamic value)
        {
            return new Hashgraph(ref value.Participants, value.Store, value.UndeterminedEvents, value.PendingRounds, ref value.LastConsensusRound, ref value.FirstConsensusRound, ref value.AnchorBlock, value.LastCommitedRoundEvents, value.SigPool, value.ConsensusTransactions, value.PendingLoadedEvents, value.commitCh, value.topologicalIndex, value.superMajority, value.trustCount, ref value.ancestorCache, ref value.selfAncestorCache, ref value.stronglySeeCache, ref value.roundCache, ref value.timestampCache, ref value.logger);
        }
    }
}